generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum InstallStatus {
  PENDING
  SUCCESS
  FAILED
}

// Basic User model (kept from boilerplate)
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String?
  firstName       String?
  lastName        String?
  avatar          String?
  emailVerifiedAt DateTime?
  role            Role      @default(USER)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  shops Shop[]

  @@map("users")
}

// Shopify Session model (kept from boilerplate for OAuth)
model Session {
  id            String    @id @default(uuid())
  shop          String
  state         String
  accessToken   String
  scope         String?
  isOnline      Boolean   @default(false)
  expires       DateTime?
  userId        String?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean   @default(false)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Foreign Keys
  shopId String?

  // Relations
  shopModel Shop? @relation(fields: [shopId], references: [id])

  @@index([shop])
  @@index([expires])
  @@map("sessions")
}

// Shop model (simplified from boilerplate)
model Shop {
  id        String   @id @default(uuid())
  shop      String   @unique
  isActive  Boolean  @default(true)
  shopData  Json?
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId String

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions      Session[]
  installations Installation[]

  @@index([userId])
  @@index([shop, isActive])
  @@map("shops")
}

// Section Store Models

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  icon      String?
  order     Int       @default(0)
  isActive  Boolean   @default(true)
  sections  Section[]
  createdAt DateTime  @default(now())
  
  @@map("categories")
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  tags        String[]
  liquidCode  String   @db.Text
  cssCode     String?  @db.Text
  jsCode      String?  @db.Text
  schema      Json?
  previewUrl  String?
  thumbnailUrl String?
  downloads   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  installations Installation[]
  @@map("sections")
}

model Installation {
  id        String        @id @default(cuid())
  shopId    String
  sectionId String
  themeId   String
  status    InstallStatus
  section   Section       @relation(fields: [sectionId], references: [id])
  shop      Shop          @relation(fields: [shopId], references: [id])
  createdAt DateTime      @default(now())
  
  @@unique([shopId, sectionId, themeId])
  @@map("installations")
}